name: Elixir CI

on:
  pull_request:
    branches: ["*"]
  push:
    branches: [main, develop]

env:
  MIX_ENV: test
  POSTGRES_HOST: postgres

jobs:
  test:
    services:
      postgres:
        image: postgres:14-alpine
        ports: ["5432:5432"]
        env:
          POSTGRES_PASSWORD: postgres
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    runs-on: ubuntu-latest
    name: Test on Elixir ${{matrix.elixir}} / OTP ${{matrix.otp}}
    container:
      image: ghcr.io/${{ github.repository }}-builder:${{matrix.elixir}}-${{matrix.otp}}
      credentials:
        username: ${{ github.repository_owner }}
        password: ${{ secrets.GITHUB_TOKEN }}

    strategy:
      matrix:
        elixir: [1.14.2]
        otp: [25.0.4]
        include:
          - coverage: false
            lint: true

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Cache deps
        uses: actions/cache@v3
        id: cache-deps
        env:
          cache-name: cache-elixir-deps
        with:
          path: deps
          key: ${{ runner.os }}-mix-${{ env.cache-name }}-${{ hashFiles('**/mix.lock') }}
          restore-keys: |
            ${{ runner.os }}-mix-${{ env.cache-name }}-

      - name: Cache compiled build
        id: cache-build
        uses: actions/cache@v3
        env:
          cache-name: cache-compiled-build
        with:
          path: _build
          key: ${{ runner.os }}-mix-${{ env.cache-name }}-${{ hashFiles('**/mix.lock') }}
          restore-keys: |
            ${{ runner.os }}-mix-${{ env.cache-name }}-
            ${{ runner.os }}-mix-

      - name: Get dprint cache
        uses: actions/cache@v3
        id: dprint-cache
        with:
          path: ~/.cache/dprint
          key: ${{ runner.os }}-node-${{ hashFiles('**/dprint.json') }}

      - name: Install Hex + Rebar
        run: mix local.hex --force && mix local.rebar --force

      # Conditionally bust the cache when job is re-run.
      # - name: Clean to rule out incremental build as a source of flakiness
      #   if: github.run_attempt != '1'
      #   run: |
      #     mix deps.clean --all
      #     mix clean

      - name: Install dependencies
        run: mix deps.get --only $MIX_ENV

      # Normally we'd use `mix deps.compile` here, however that incurs a large
      # performance penalty when the dependencies are already fully compiled:
      # https://elixirforum.com/t/github-action-cache-elixir-always-recompiles-dependencies-elixir-1-13-3/45994/12
      #
      # Accoring to Jose Valim at the above link `mix loadpaths` will check and
      # compile missing dependencies
      - name: Compile dependencies
        run: mix loadpaths

      - name: Run code quality checks
        run: make lint
        if: ${{matrix.lint}}

      - name: Run tests
        run: make test
        if: ${{!matrix.coverage}}

      - name: Run tests with coverage
        run: make test.coverage
        if: ${{matrix.coverage}}
